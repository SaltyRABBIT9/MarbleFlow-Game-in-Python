# -*- coding: utf-8 -*-
"""MarbleFlow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q8qXQJicKvwfB3PqqIMI4b7MFsket6GX
"""

class marbleFlow_Board:
    def __init__(self, marbleFlow):
        if marbleFlow is not None:
            self.marbleFlow = marbleFlow[:]
        else:
            self.marbleFlow = [0 for i in range(14)]
            for i in range(0, 6):
                self.marbleFlow[i] = 4
            for i in range(7, 13):
                self.marbleFlow[i] = 4

    def player_move(self, i):
        j = i
        repeat_turn = False
        add = self.marbleFlow[j]
        self.marbleFlow[j] = 0
        if i > 6:
            stones = add
            while stones > 0:
                i += 1
                i = i % 14
                if i == 6:
                    continue
                else:
                    self.marbleFlow[i % 14] += 1
                stones -= 1
            if i > 6 and self.marbleFlow[i] == 1 and i != 13 and self.marbleFlow[5 - (i - 7)] != 0:
                self.marbleFlow[13] += 1 + self.marbleFlow[5 - (i - 7)]
                self.marbleFlow[i] = 0
                self.marbleFlow[5 - (i - 7)] = 0
            if i == 13:
                repeat_turn = True
        else:
            stones = add
            while stones > 0:
                i += 1
                i = i % 14
                if i == 13:
                    continue
                else:
                    self.marbleFlow[i % 14] += 1
                stones -= 1
            if i < 6 and self.marbleFlow[i] == 1 and i != 6 and self.marbleFlow[-i + 12] != 0:
                self.marbleFlow[6] += 1 + self.marbleFlow[-i + 12]
                self.marbleFlow[i] = 0
                self.marbleFlow[-i + 12] = 0
            if i == 6:
                repeat_turn = True
        return repeat_turn

    def isEnd(self):
        if sum(self.marbleFlow[0:6]) == 0:
            self.marbleFlow[13] += sum(self.marbleFlow[7:13])
            for i in range(14):
                if (i != 13 and i != 6):
                    self.marbleFlow[i] = 0

            return True
        elif sum(self.marbleFlow[7:13]) == 0:
            self.marbleFlow[6] += sum(self.marbleFlow[0:6])
            for i in range(14):
                if (i != 13 and i != 6):
                    self.marbleFlow[i] = 0
            return True

        return False

    def print_marbleFlow(self):
        for i in range(12, 6, -1):
            print('  ', self.marbleFlow[i], '   ', end='')
        print('  ')
        print(self.marbleFlow[13], '                                           ', self.marbleFlow[6])

        for i in range(0, 6, 1):
            print('  ', self.marbleFlow[i], '   ', end='')
        print('  ')

    def husVal(self):
        if self.isEnd():
            if self.marbleFlow[13] > self.marbleFlow[6]:
                return 100
            elif self.marbleFlow[13] == self.marbleFlow[6]:
                return 0
            else:
                return -100
        else:
            return self.marbleFlow[13] - self.marbleFlow[6]


def alphabeta(marbleFlow, depth, alpha, beta, MinorMax):
    if depth == 0 or marbleFlow.isEnd():
        return marbleFlow.husVal(), -1
    if MinorMax:
        v = -1000000
        player_move = -1
        for i in range(7, 13, 1):
            if marbleFlow.marbleFlow[i] == 0:
                continue
            a = marbleFlow_Board(marbleFlow.marbleFlow[:])
            minormax = a.player_move(i)
            newv, _ = alphabeta(a, depth - 1, alpha, beta, minormax)
            if v < newv:
                player_move = i
                v = newv
            alpha = max(alpha, v)
            if alpha >= beta:
                break
        return v, player_move
    else:
        v = 1000000
        player_move = -1
        for i in range(0, 6, 1):
            if marbleFlow.marbleFlow[i] == 0:
                continue
            a = marbleFlow_Board(marbleFlow.marbleFlow[:])
            minormax = a.player_move(i)
            newv, _ = alphabeta(a, depth - 1, alpha, beta, not minormax)
            if v > newv:
                player_move = i
                v = newv
            beta = min(beta, v)
            if alpha >= beta:
                break
        return v, player_move


def player_ai():
    j = marbleFlow_Board(None)
    j.print_marbleFlow()
    while True:
        if j.isEnd():
            break
        while True:
            if j.isEnd():
                break
            h = int(input("YOUR TURN ---- "))
            if h > 5 or j.marbleFlow[h] == 0:
                print("You can't play at this position. Choose another position.")
                continue
            t = j.player_move(h)
            j.print_marbleFlow()
            if not t:
                break
        while True:
            if j.isEnd():
                break
            print("AI TURN >>>> ", end="")
            _, k = alphabeta(j, 10, -100000, 100000, True)
            print(k)
            t = j.player_move(k)
            j.print_marbleFlow()
            if not t:
                break
    if j.marbleFlow[0] < j.marbleFlow[13]:
        print("AI WINS")
    else:
        print("YOU WIN")
    print('GAME ENDED')
    j.print_marbleFlow()


print("\n:::: MarbleFlow GAME ::::")
print("!!! Welcome to MarbleFlow Gameplay !!!")

while True:
    player_ai()
    break

